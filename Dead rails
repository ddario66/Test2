local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)

if not success or not Rayfield then
    warn("Failed to load Rayfield UI Library!")
    return
end

-- Create the main window
local Window = Rayfield:CreateWindow({
    Name = "ddariuspr",
    Icon = 0,
    LoadingTitle = "Welcome",
    LoadingSubtitle = "",
    Theme = "Default",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "DD Hub"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "IRAQ",
        Subtitle = "IRAQ Hub",
        Note = "Key is : Iraq",
        FileName = "Key",
        SaveKey = false,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

print("Window created successfully!")

-- Aimbot Script
local RunService = game:GetService("RunService")
local Cam = workspace.CurrentCamera
local Player = game:GetService("Players").LocalPlayer

local validNPCs = {}
local raycastParams = RaycastParams.new()
raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

local function isNPC(obj)
    return obj:IsA("Model") 
        and obj:FindFirstChild("Humanoid")
        and obj.Humanoid.Health > 0
        and obj:FindFirstChild("Head")
        and obj:FindFirstChild("HumanoidRootPart")
        and not game:GetService("Players"):GetPlayerFromCharacter(obj)
end

local function updateNPCs()
    local tempTable = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
        if isNPC(obj) then
            tempTable[obj] = true
        end
    end
    for i = #validNPCs, 1, -1 do
        if not tempTable[validNPCs[i]] then
            table.remove(validNPCs, i)
        end
    end
    for obj in pairs(tempTable) do
        if not table.find(validNPCs, obj) then
            table.insert(validNPCs, obj)
        end
    end
end

local function handleDescendant(descendant)
    if isNPC(descendant) then
        table.insert(validNPCs, descendant)
        local humanoid = descendant:WaitForChild("Humanoid")
        humanoid.Destroying:Connect(function()
            for i = #validNPCs, 1, -1 do
                if validNPCs[i] == descendant then
                    table.remove(validNPCs, i)
                    break
                end
            end
        end)
    end
end

workspace.DescendantAdded:Connect(handleDescendant)

local function predictPos(target)
    local rootPart = target:FindFirstChild("HumanoidRootPart")
    local head = target:FindFirstChild("Head")
    if not rootPart or not head then
        return head and head.Position or rootPart and rootPart.Position
    end
    local velocity = rootPart.Velocity
    local predictionTime = 0.02
    local basePosition = rootPart.Position + velocity * predictionTime
    local headOffset = head.Position - rootPart.Position
    return basePosition + headOffset
end

local function getTarget()
    local nearest = nil
    local minDistance = math.huge
    local viewportCenter = Cam.ViewportSize / 2
    raycastParams.FilterDescendantsInstances = {Player.Character}
    for _, npc in ipairs(validNPCs) do
        local predictedPos = predictPos(npc)
        local screenPos, visible = Cam:WorldToViewportPoint(predictedPos)
        if visible and screenPos.Z > 0 then
            local ray = workspace:Raycast(
                Cam.CFrame.Position,
                (predictedPos - Cam.CFrame.Position).Unit * 1000,
                raycastParams
            )
            if ray and ray.Instance:IsDescendantOf(npc) then
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - viewportCenter).Magnitude
                if distance < minDistance then
                    minDistance = distance
                    nearest = npc
                end
            end
        end
    end
    return nearest
end

local function aim(targetPosition)
    local currentCF = Cam.CFrame
    local targetDirection = (targetPosition - currentCF.Position).Unit
    local smoothFactor = 0.581
    local newLookVector = currentCF.LookVector:Lerp(targetDirection, smoothFactor)
    Cam.CFrame = CFrame.new(currentCF.Position, currentCF.Position + newLookVector)
end

local heartbeat = RunService.Heartbeat
local lastUpdate = 0
local UPDATE_INTERVAL = 0.4

local aimbotEnabled = false

heartbeat:Connect(function(dt)
    lastUpdate = lastUpdate + dt
    if lastUpdate >= UPDATE_INTERVAL then
        updateNPCs()
        lastUpdate = 0
    end
    if aimbotEnabled then
        local target = getTarget()
        if target then
            local predictedPosition = predictPos(target)
            aim(predictedPosition)
        end
    end
end)

-- npc remove
workspace.DescendantRemoving:Connect(function(descendant)
    if isNPC(descendant) then
        for i = #validNPCs, 1, -1 do
            if validNPCs[i] == descendant then
                table.remove(validNPCs, i)
                break
            end
        end
    end
end)

-- Create Aimbot Tab
local AimbotTab = Window:CreateTab("Aimbot", 4483362458) -- Replace with your desired icon ID

-- Aimbot Toggle
local aimbotToggle = AimbotTab:CreateToggle({
    Name = "Enable Aimbot",
    CurrentValue = false,
    Flag = "AimbotToggle",
    Callback = function(Value)
        aimbotEnabled = Value
    end
})

-- Existing Tabs and Functionality
local BringsTab = Window:CreateTab("Brings", 4483362458)

local function GetItemNames()
    local items = {}
    local runtimeItems = workspace:FindFirstChild("RuntimeItems")
    if runtimeItems then
        for _, item in ipairs(runtimeItems:GetDescendants()) do
            if item:IsA("Model") then
                table.insert(items, item.Name)
            end
        end
    else
        warn("RuntimeItems folder not found!")
    end
    return items
end

local Dropdown = BringsTab:CreateDropdown({
    Name = "Choose item",
    Options = GetItemNames(),
    CurrentOption = "Select an item",
    MultipleOptions = false,
    Flag = "ItemDropdown",
    Callback = function(selectedItem)
        if type(selectedItem) == "table" then
            selectedItem = selectedItem[1]
        end
    end,
})

local RefreshButton = BringsTab:CreateButton({
    Name = "Refresh Items",
    Callback = function()
        Dropdown:Refresh(GetItemNames())
    end,
})

local collectButton = BringsTab:CreateButton({
    Name = "Collect Selected Item",
    Callback = function()
        local selectedItemName = Dropdown.CurrentOption
        if type(selectedItemName) == "table" then
            selectedItemName = selectedItemName[1]
        end

        if selectedItemName == "Select an item" then
            warn("No item selected!")
            return
        end

        local runtimeItems = workspace:FindFirstChild("RuntimeItems")
        if not runtimeItems then
            warn("RuntimeItems folder not found!")
            return
        end

        local selectedItem
        for _, item in ipairs(runtimeItems:GetDescendants()) do
            if item:IsA("Model") and item.Name == selectedItemName then
                selectedItem = item
                break
            end
        end

        if not selectedItem then
            warn("Item not found in RuntimeItems:", selectedItemName)
            return
        end

        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        if not LocalPlayer then
            warn("LocalPlayer not found!")
            return
        end

        local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

        if not selectedItem.PrimaryPart then
            warn(selectedItem.Name .. " has no PrimaryPart and cannot be moved.")
            return
        end

        selectedItem:SetPrimaryPartCFrame(HumanoidRootPart.CFrame + Vector3.new(0, 1, 0))
        print("Collected:", selectedItem.Name)
    end,
})

local collectAllButton = BringsTab:CreateButton({
    Name = "Collect All Items",
    Callback = function()
        local runtimeItems = workspace:FindFirstChild("RuntimeItems")
        if not runtimeItems then
            warn("RuntimeItems folder not found!")
            return
        end

        local ps = game:GetService("Players").LocalPlayer
        local ch = ps.Character or ps.CharacterAdded:Wait()
        local HumanoidRootPart = ch:WaitForChild("HumanoidRootPart")

        for _, item in ipairs(runtimeItems:GetDescendants()) do
            if item:IsA("Model") then
                if item.PrimaryPart then
                    local offset = HumanoidRootPart.CFrame.LookVector * 5
                    item:SetPrimaryPartCFrame(HumanoidRootPart.CFrame + offset)
                else
                    warn(item.Name .. " has no PrimaryPart .")
                end
            end
        end
    end,
})

-- Create Player Tab
local EspTab = Window:CreateTab("Player", 4483362458)

local ESPHandles = {}
local ESPEnabled = false

local function CreateESP(object, color)
    if not object or not object.PrimaryPart then return end

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.Adornee = object
    highlight.FillColor = color
    highlight.OutlineColor = color
    highlight.Parent = object

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_Billboard"
    billboard.Adornee = object.PrimaryPart
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 5, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = object

    local textLabel = Instance.new("TextLabel")
    textLabel.Text = object.Name
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.TextColor3 = color
    textLabel.BackgroundTransparency = 1
    textLabel.TextSize = 7
    textLabel.Parent = billboard

    ESPHandles[object] = {Highlight = highlight, Billboard = billboard}
end

local function ClearESP()
    for obj, handles in pairs(ESPHandles) do
        if handles.Highlight then handles.Highlight:Destroy() end
        if handles.Billboard then handles.Billboard:Destroy() end
    end
    ESPHandles = {}
end

local function UpdateESP()
    ClearESP()

    -- ESP for Items 
    local runtimeItems = workspace:FindFirstChild("RuntimeItems")
    if runtimeItems then
        for _, item in ipairs(runtimeItems:GetDescendants()) do
            if item:IsA("Model") then
                CreateESP(item, Color3.new(1, 0, 0)) 
            end
        end
    end

    -- ESP mobs
    local baseplates = workspace:FindFirstChild("Baseplates")
    if baseplates and #baseplates:GetChildren() >= 2 then
        local secondBaseplate = baseplates:GetChildren()[2]
        local centerBaseplate = secondBaseplate and secondBaseplate:FindFirstChild("CenterBaseplate")
        local animals = centerBaseplate and centerBaseplate:FindFirstChild("Animals")
        if animals then
            for _, animal in ipairs(animals:GetDescendants()) do
                if animal:IsA("Model") then
                    CreateESP(animal, Color3.new(1, 0, 1)) -- Purple for Animals
                end
            end
        end
    end

    local nightEnemies = workspace:FindFirstChild("NightEnemies")
    if nightEnemies then
        for _, enemy in ipairs(nightEnemies:GetDescendants()) do
            if enemy:IsA("Model") then
                CreateESP(enemy, Color3.new(0, 0, 1)) -- Blue for Night Enemies
            end
        end
    end

    local destroyedHouse = workspace:FindFirstChild("RandomBuildings") and workspace.RandomBuildings:FindFirstChild("DestroyedHouse")
    local zombiePart = destroyedHouse and destroyedHouse:FindFirstChild("StandaloneZombiePart")
    local zombies = zombiePart and zombiePart:FindFirstChild("Zombies")
    if zombies then
        for _, zombie in ipairs(zombies:GetChildren()) do
            if zombie:IsA("Model") then
                CreateESP(zombie, Color3.new(0, 1, 0)) -- Green for Zombies
            end
        end
    end
end

local function AutoUpdateESP()
    while ESPEnabled do
        UpdateESP()
        wait() 
    end
end

local espToggle = EspTab:CreateToggle({
    Name = "ESP Items and Mobs",
    CurrentValue = false,
    Flag = "ESPAllToggle",
    Callback = function(Value)
        ESPEnabled = Value
        if Value then
            UpdateESP()
            coroutine.wrap(AutoUpdateESP)()
        else
            ClearESP()
        end
    end
})

-- Walkspeed Manipulator
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

getgenv().MovementSettings = {
    Enabled = false,
    Speed = 90
}

local function manipulateMovement()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
    local RootPart = LocalPlayer.Character.HumanoidRootPart
    local Humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")

    if not Humanoid then return end

    RunService.Stepped:Connect(function()
        if getgenv().MovementSettings.Enabled then
            local moveDirection = Humanoid.MoveDirection
            RootPart.Velocity = Vector3.new(
                moveDirection.X * getgenv().MovementSettings.Speed,
                RootPart.Velocity.Y, 
                moveDirection.Z * getgenv().MovementSettings.Speed
            )
        end
    end)
end

manipulateMovement()

-- Add Speed Slider and Toggle to Player Tab
local speedToggle = EspTab:CreateToggle({
    Name = "Speed",
    CurrentValue = false,
    Flag = "SpeedToggle",
    Callback = function(Value)
        getgenv().MovementSettings.Enabled = Value
    end
})

local speedSlider = EspTab:CreateSlider({
    Name = "Speed",
    Range = {20, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 25,
    Flag = "SpeedSlider",
    Callback = function(Value)
        getgenv().MovementSettings.Speed = Value
    end
})

-- Add FOV Slider and Toggle to Player Tab
local fovEnabled = false

local function updateFOV()
    local camera = game:GetService("Workspace").CurrentCamera
    if fovEnabled then
        camera.FieldOfView = getgenv().FOVSettings.FOV
    else
        camera.FieldOfView = 70 -- Default FOV value
    end
end

getgenv().FOVSettings = {
    Enabled = false,
    FOV = 200
}

local fovToggle = EspTab:CreateToggle({
    Name = "Enable FOV",
    CurrentValue = false,
    Flag = "FOVToggle",
    Callback = function(Value)
        fovEnabled = Value
        getgenv().FOVSettings.Enabled = Value
        updateFOV()
    end
})

local fovSlider = EspTab:CreateSlider({
    Name = "FOV",
    Range = {50, 350},
    Increment = 1,
    Suffix = "FOV",
    CurrentValue = 70,
    Flag = "FOVSlider",
    Callback = function(Value)
        getgenv().FOVSettings.FOV = Value
        updateFOV()
    end
})

-- Add Fly Button to Player Tab
local flyButton = EspTab:CreateButton({
    Name = "Fly",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
    end
})

-- Create a new tab for Teleport
local TpTab = Window:CreateTab("Teleport", 4483362458)

-- Add a text label to the Teleport Tab
local textLabel = TpTab:CreateSection("They are not everytime in the right place")

-- Add teleport Button to Teleport Tab
local teleportButton1 = TpTab:CreateButton({
    Name = "House 1",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-115.03990173339844, 32.50211715698242, 28974.595703125)
    end
})

-- Add teleport Button to Teleport Tab
local teleportButton2 = TpTab:CreateButton({
    Name = "Village",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-595.7720947265625, 43.689491271972656, 21893.7890625)
    end
})

-- Add teleport Button to Teleport Tab
local teleportButton3 = TpTab:CreateButton({
    Name = "Village 2",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-165.2715606689453, 45.01223373413086, 20029.560546875)
    end
})

-- Add teleport Button to Teleport Tab
local teleportButton4 = TpTab:CreateButton({
    Name = "Village 3",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0.7807304859161377, 10.394166946411133, 29903.974609375)
    end
})

-- Add teleport Button to Teleport Tab
local teleportButton5 = TpTab:CreateButton({
    Name = "Castle",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(141.18247985839844, 45.05661392211914, -9154.1943359375)
    end
})

-- Add teleport Button to Teleport Tab
local teleportButton6 = TpTab:CreateButton({
    Name = "Bridge",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-394.02459716796875, 10.379490852355957, -49155.30078125)
    end
})

-- Add teleport Buttn to Teleport Tab
local teleportButton7 = TpTab:CreateButton({
    Name = "Go back to train",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0.7807304859161377, 10.394166946411133, 29903.974609375)
    end
})
